// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SysWas.Repository.Context;

namespace SysWas.Repository.Migrations
{
    [DbContext(typeof(SysWasContext))]
    [Migration("20200318170726_StepTwo")]
    partial class StepTwo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SysWas.Domain.Entidades.CEP.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EstadoId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.CEP.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Cep");

                    b.Property<string>("Complemento")
                        .HasMaxLength(40);

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("Cep")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.CEP.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.EstadoPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EstadoPedido");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.ListaInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InsumoId");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("InsumoId");

                    b.ToTable("ListaInsumo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.ListaMadeira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MadeiraId");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("MadeiraId");

                    b.ToTable("ListaMadeira");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEntrega");

                    b.Property<DateTime>("DataPedido");

                    b.Property<DateTime>("DataPrevisao");

                    b.Property<int>("EmpresaId");

                    b.Property<int>("EstadoPedidoId");

                    b.Property<int>("FornecedorId");

                    b.Property<int>("NotaFiscalId");

                    b.Property<string>("Observacao");

                    b.Property<bool>("Rnc");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoPedidoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("NotaFiscalId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Empresas.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cnpj");

                    b.Property<int>("EnderecoId");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("NumeroEndereco");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.ControleSaldo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAtualizacao");

                    b.Property<DateTime>("DataRegistro");

                    b.Property<int>("EmpresaId");

                    b.Property<double>("SaldoAnterior");

                    b.Property<double>("SaldoAtual");

                    b.Property<double>("SaldoPrevisto");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ControleSaldo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Custo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AprovacaoId");

                    b.Property<int>("AprovavaoId");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<int>("PagamentoId");

                    b.Property<bool>("Pago");

                    b.Property<int>("TipoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("AprovacaoId");

                    b.HasIndex("PagamentoId");

                    b.HasIndex("TipoId");

                    b.ToTable("Custo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Despesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AprovacaoId");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<int>("PagamentoId");

                    b.Property<bool>("Pago");

                    b.Property<int>("TipoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("AprovacaoId");

                    b.HasIndex("PagamentoId");

                    b.HasIndex("TipoId");

                    b.ToTable("Despesa");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Dre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataFim");

                    b.Property<DateTime>("DataInicio");

                    b.Property<double>("SaldoAnterior");

                    b.Property<double>("SaldoAtual");

                    b.Property<double>("ValorCusto");

                    b.Property<double>("ValorDespesa");

                    b.Property<double>("ValorReceita");

                    b.HasKey("Id");

                    b.ToTable("Dre");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.ListaBancoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Agencia");

                    b.Property<int>("BancoId");

                    b.Property<int>("Conta");

                    b.Property<int>("DigitoAgencia");

                    b.Property<int>("EmpresaId");

                    b.Property<double>("Saldo");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ListaBancoEmpresa");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Receita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AprovacaoId");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<int>("PagamentoId");

                    b.Property<bool>("Recebeu");

                    b.Property<int>("TipoId");

                    b.Property<double>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("AprovacaoId");

                    b.HasIndex("PagamentoId");

                    b.HasIndex("TipoId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.TipoCusto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoCusto");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.TipoDespesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoDespesa");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.TipoReceita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("TipoReceita");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Celular")
                        .IsRequired();

                    b.Property<string>("Cnpj")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailNotaFiscal")
                        .IsRequired();

                    b.Property<int?>("EnderecoFornecedorId");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired();

                    b.Property<string>("InscricaoMunicipal")
                        .IsRequired();

                    b.Property<int>("ListaContatoId");

                    b.Property<string>("NomeFantasia")
                        .IsRequired();

                    b.Property<int>("NumEndereco");

                    b.Property<string>("Observacao")
                        .IsRequired();

                    b.Property<string>("RazaoSocial")
                        .IsRequired();

                    b.Property<string>("Site")
                        .IsRequired();

                    b.Property<string>("Telefone")
                        .IsRequired();

                    b.Property<int>("TipoFornecedorId");

                    b.Property<bool>("Transportadora");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoFornecedorId");

                    b.HasIndex("ListaContatoId");

                    b.HasIndex("TipoFornecedorId");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.ListaBancaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Agencia");

                    b.Property<int?>("BancoId");

                    b.Property<int>("BandoId");

                    b.Property<int>("Conta");

                    b.Property<int>("DigitoAgencia");

                    b.Property<int>("DigitoConta");

                    b.Property<int>("FornecedorId");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("ListaBancaria");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.ListaContato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ListaContato");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.TipoFornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Insumo");

                    b.Property<bool>("Madeira");

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoFornecedor");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Frete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AprovacaoId");

                    b.Property<DateTime>("DataEntrega");

                    b.Property<int>("DestinoId");

                    b.Property<double>("Distancia");

                    b.Property<bool>("Km");

                    b.Property<int>("OrigemId");

                    b.Property<double>("ValorFrete");

                    b.Property<int>("VeiculoId");

                    b.Property<bool>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("AprovacaoId");

                    b.HasIndex("DestinoId");

                    b.HasIndex("OrigemId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Frete");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.ItemTabelaFrete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("DistanciaMax");

                    b.Property<double>("DistanciaMin");

                    b.Property<int>("TabelaId");

                    b.Property<double>("ValorDistancia");

                    b.Property<double>("ValorVolume");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("TabelaId");

                    b.ToTable("ItemTabelaFrete");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Motorista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf")
                        .IsRequired();

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NumCnh")
                        .IsRequired();

                    b.Property<string>("Rg")
                        .IsRequired();

                    b.Property<int>("SexoId");

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.ToTable("Motorista");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.TabelaFrete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<int>("ProprietarioId");

                    b.Property<int>("VeiculoId");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("TabelaFrete");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Transportadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FornecedorId");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Transportadora");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Veiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Placa")
                        .IsRequired();

                    b.Property<int>("ProprietarioId");

                    b.Property<int>("QuantEixos");

                    b.HasKey("Id");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("Veiculo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.ControleInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("QuantAlerta");

                    b.Property<double>("VolumeAlerta");

                    b.HasKey("Id");

                    b.ToTable("ControleInsumo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.EstoqueInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ItemId");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("EstoqueInsumo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ControleId");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("ControleId");

                    b.HasIndex("TipoId");

                    b.ToTable("Insumo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.TipoInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoInsumo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.ControleMadeira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("QuantAlerta");

                    b.Property<double>("VolumeAlerta");

                    b.HasKey("Id");

                    b.ToTable("ControleMadeira");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "SEM CONTROLE",
                            QuantAlerta = 0,
                            VolumeAlerta = 0.0
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.EspecieMadeira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Especie")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EspecieMadeira");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especie = "Eucalipto"
                        },
                        new
                        {
                            Id = 2,
                            Especie = "Pinos"
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Fardo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Baixa");

                    b.Property<int>("LoteId");

                    b.Property<int>("MadeiraId");

                    b.Property<int>("Numero");

                    b.Property<int>("ProprietarioId");

                    b.Property<int>("Quantidade");

                    b.Property<double>("Volume");

                    b.HasKey("Id");

                    b.HasIndex("LoteId");

                    b.HasIndex("MadeiraId");

                    b.HasIndex("ProprietarioId");

                    b.ToTable("Fardo");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Baixa");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("PedidoId");

                    b.Property<long>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Lote");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Madeira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Comprimento");

                    b.Property<int>("ControleId");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("EspecieId");

                    b.Property<double>("Espessura");

                    b.Property<double>("Largura");

                    b.Property<bool>("PreBenef");

                    b.Property<int>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("ControleId");

                    b.HasIndex("EspecieId");

                    b.HasIndex("TipoId");

                    b.ToTable("Madeira");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.TipoMadeira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TipoMadeira");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "Ripa"
                        },
                        new
                        {
                            Id = 2,
                            Tipo = "Caibro"
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Usuarios.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcaoRealizada")
                        .IsRequired();

                    b.Property<DateTime>("DataHistorico");

                    b.Property<int>("IdAcao");

                    b.Property<string>("Tabela")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Historico");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Usuarios.Permissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Usuarios.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("SexoId");

                    b.Property<string>("SobreNome")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Contato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ListaContatoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefone")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ListaContatoId");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.EstadoAprovacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EstadoAprovacao");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Aprovação em Espera",
                            Nome = "Em Espera"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Pedido Negado",
                            Nome = "Negado"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Pedido Aprovado",
                            Nome = "Aprovado"
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FormaPagamento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Forma de Pagamento Boleto",
                            Nome = "Boleto"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Forma de Pagamento Cartão de Crédito",
                            Nome = "Cartão de Crédito"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Forma de Pagamento Depósito",
                            Nome = "Depósito"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Forma de Pagamento Cheque",
                            Nome = "Cheque"
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.LogReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Log")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LogReg");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.NotaFiscal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Documento");

                    b.Property<int>("Numero");

                    b.Property<decimal>("Valor")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 38, scale: 17)))
                        .HasColumnType("decimal(19,2)");

                    b.HasKey("Id");

                    b.ToTable("NotaFiscal");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.SecEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataRegistro");

                    b.Property<int>("IdReg");

                    b.Property<string>("NomeReg")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SecEdit");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sexo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Feminino"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Outros"
                        });
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contato")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.CEP.Cidade", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.CEP.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.ListaInsumo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Insumos.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.ListaMadeira", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Madeiras.Madeira", "Madeira")
                        .WithMany()
                        .HasForeignKey("MadeiraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Compras.Pedido", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Empresas.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Compras.EstadoPedido", "EstadoPedido")
                        .WithMany()
                        .HasForeignKey("EstadoPedidoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.NotaFiscal", "Notafiscal")
                        .WithMany()
                        .HasForeignKey("NotaFiscalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Empresas.Empresa", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.CEP.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.ControleSaldo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Empresas.Empresa", "Proprietario")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Custo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.EstadoAprovacao", "Aprovacao")
                        .WithMany()
                        .HasForeignKey("AprovacaoId");

                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.FormaPagamento", "Pagamento")
                        .WithMany()
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Financeiro.TipoCusto", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Despesa", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.EstadoAprovacao", "Aprovacao")
                        .WithMany()
                        .HasForeignKey("AprovacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.FormaPagamento", "Pagamento")
                        .WithMany()
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Financeiro.TipoDespesa", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.ListaBancoEmpresa", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Empresas.Empresa", "Proprietario")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Financeiro.Receita", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.EstadoAprovacao", "Aprovacao")
                        .WithMany()
                        .HasForeignKey("AprovacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.FormaPagamento", "Pagamento")
                        .WithMany()
                        .HasForeignKey("PagamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Financeiro.TipoReceita", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.Fornecedor", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.CEP.Endereco", "EnderecoFornecedor")
                        .WithMany()
                        .HasForeignKey("EnderecoFornecedorId");

                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.ListaContato", "ListaContatoFornecedor")
                        .WithMany()
                        .HasForeignKey("ListaContatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.TipoFornecedor", "TipoF")
                        .WithMany()
                        .HasForeignKey("TipoFornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fornecedores.ListaBancaria", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Frete", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.EstadoAprovacao", "Aprovacao")
                        .WithMany()
                        .HasForeignKey("AprovacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Empresas.Empresa", "Destino")
                        .WithMany()
                        .HasForeignKey("DestinoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.Fornecedor", "Origem")
                        .WithMany()
                        .HasForeignKey("OrigemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Fretes.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.ItemTabelaFrete", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Fretes.TabelaFrete", "Tabela")
                        .WithMany("Itens")
                        .HasForeignKey("TabelaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Motorista", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.TabelaFrete", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Fretes.Transportadora", "Proprietario")
                        .WithMany()
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Fretes.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Transportadora", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.Fornecedor", "FornecedorTransporte")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Fretes.Veiculo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Fretes.Transportadora", "Proprietario")
                        .WithMany()
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.EstoqueInsumo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Insumos.Insumo", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Insumos.Insumo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Insumos.ControleInsumo", "Controle")
                        .WithMany()
                        .HasForeignKey("ControleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Insumos.TipoInsumo", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Fardo", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Madeiras.Lote", "Lote")
                        .WithMany("ListaFardos")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Madeiras.Madeira", "Madeira")
                        .WithMany()
                        .HasForeignKey("MadeiraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Empresas.Empresa", "Proprietario")
                        .WithMany()
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Lote", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Compras.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Madeiras.Madeira", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Madeiras.ControleMadeira", "Controle")
                        .WithMany()
                        .HasForeignKey("ControleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Madeiras.EspecieMadeira", "Especie")
                        .WithMany()
                        .HasForeignKey("EspecieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SysWas.Domain.Entidades.Madeiras.TipoMadeira", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Usuarios.Usuario", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Utilitarios.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.Contato", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Fornecedores.ListaContato", "Lista")
                        .WithMany("Contatos")
                        .HasForeignKey("ListaContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SysWas.Domain.Entidades.Utilitarios.SecEdit", b =>
                {
                    b.HasOne("SysWas.Domain.Entidades.Usuarios.Usuario", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
